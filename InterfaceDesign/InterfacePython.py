#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Mar 23, 2024 03:43:56 PM EDT  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path
import numpy as np

#Modifié
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

_location = os.path.dirname(__file__)

import InterfacePython_support

_bgcolor = '#d9d9d9'
_fgcolor = '#000000'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

data ={'masse': 100, 'tension': 1.445, 'stable': True}

def position_tension(tension_ampli):
        C1 = 5813.9
        C2 = 198.24
        C3 = 0.60750
        
        tension_non_ampli = (tension_ampli/2.4) + 0.4
        position = np.sqrt((C1/(tension_non_ampli - C3))**(2/3) - C2)
        return position

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        #Modifié====
        top.geometry("800x550")
        # top.minsize(120, 1)
        # top.maxsize(3076, 845)
        top.title("Interface de contrôle du prototype")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="#000000")

        # Make the GUI not resizable
        top.resizable(0,0)

        self.top = top
        self.che86 = tk.IntVar()
        self.labelMasse = tk.StringVar()
        
        self.graph_choice = 0
        #Modifié

        self.x = 0
        self.yforce = 0
        self.yposition = 0

        self.Labelframe3 = tk.LabelFrame(self.top)
        self.Labelframe3.place(x=260, y=158, height=389, width=530)
        self.Labelframe3.configure(relief='groove')
        self.Labelframe3.configure(font="-family {Segoe UI} -size 11 -weight bold")
        self.Labelframe3.configure(foreground="#000000")
        self.Labelframe3.configure(text='''Graphiques''')
        self.Labelframe3.configure(background="#d9d9d9")
        self.Labelframe3.configure(cursor="fleur")
        self.Labelframe3.configure(highlightbackground="#d9d9d9")
        self.Labelframe3.configure(highlightcolor="#000000")


        #Modifié======
        self.Listbox3 = tk.Listbox(self.Labelframe3)
        self.Listbox3.place(x=10, y=337, height=44, width=314
                , bordermode='ignore')
        self.Listbox3.configure(background="white")
        self.Listbox3.configure(disabledforeground="#a3a3a3")
        self.Listbox3.configure(font="TkFixedFont")
        self.Listbox3.configure(foreground="#000000")
        self.Listbox3.configure(highlightbackground="#d9d9d9")
        self.Listbox3.configure(highlightcolor="#000000")
        self.Listbox3.configure(selectbackground="#d9d9d9")
        self.Listbox3.configure(selectforeground="black")
        self.Listbox3.insert(tk.END, "Force en fonction du temps")
        self.Listbox3.insert(tk.END, "Position en fonction du temps")
        def on_selectgraph(event):
                selected_item = self.Listbox3.get(self.Listbox3.curselection())
                if selected_item == "Force en fonction du temps":
                        self.graph_choice = 1
                        self.spectrum_viewer_fcn()
                elif selected_item == "Position en fonction du temps":
                        self.graph_choice = 2
                        self.spectrum_viewer_fcn()
        self.Listbox3.bind("<<ListboxSelect>>", on_selectgraph)
        #=====



        self.Canvas1 = tk.Canvas(self.Labelframe3)
        self.Canvas1.place(x=10, y=24, height=307, width=513
                , bordermode='ignore')
        self.Canvas1.configure(background="#d9d9d9")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(highlightbackground="#d9d9d9")
        self.Canvas1.configure(highlightcolor="#000000")
        self.Canvas1.configure(insertbackground="#000000")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="#d9d9d9")
        self.Canvas1.configure(selectforeground="black")

        #Modifié=====
        # Create a Matplotlib figure
        self.fig, self.ax = plt.subplots(figsize=(5, 3.1))
        self.ax.plot([1, 2, 3, 4], [1, 4, 2, 3], color='black', linewidth=1.5) 
        plt.ticklabel_format(style='sci', axis='x', scilimits=(0,0))
        self.ax.set_xlabel('Indéterminé', fontsize=10)
        self.ax.set_ylabel('Indéterminé', fontsize=10)
        
        # Embed the Matplotlib plot into Tkinter canvas
        self.canvas = FigureCanvasTkAgg(self.fig, master=self.Canvas1)
        self.fig.tight_layout()

        self.canvas.draw()
        self.canvas.get_tk_widget().pack(side=tk.TOP, fill='x', expand=1)
        #========


        self.Labelframe2 = tk.LabelFrame(self.top)
        self.Labelframe2.place(x=260, y=52, height=105, width=530)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(font="-family {Segoe UI} -size 11 -weight bold")
        self.Labelframe2.configure(foreground="#000000")
        self.Labelframe2.configure(text='''Masse active''')
        self.Labelframe2.configure(background="#d9d9d9")
        self.Labelframe2.configure(highlightbackground="#d9d9d9")
        self.Labelframe2.configure(highlightcolor="#000000")

        self.Buttonaqui = tk.Button(self.Labelframe2, command=self.acquisition)
        self.Buttonaqui.place(x=330, y=33, height=50, width=190, bordermode='ignore')

        self.Buttonaqui.configure(activebackground="#d9d9d9")
        self.Buttonaqui.configure(activeforeground="black")
        self.Buttonaqui.configure(background="#d9d9d9")
        self.Buttonaqui.configure(disabledforeground="#a3a3a3")
        self.Buttonaqui.configure(foreground="#000000")
        self.Buttonaqui.configure(highlightbackground="#d9d9d9")
        self.Buttonaqui.configure(highlightcolor="#000000")
        self.Buttonaqui.configure(text='''Acquisition''')


        #dexuière des deux listesbox ou la masse NOMBRE DE CHIFFRES APRES LA VIRGULE
        self.Listbox2 = tk.Listbox(self.Labelframe2)
        self.Listbox2.place(x=270, y=20, height=72, width=54
                , bordermode='ignore')
        self.Listbox2.configure(background="white")
        self.Listbox2.configure(disabledforeground="#a3a3a3")
        self.Listbox2.configure(font="TkFixedFont")
        self.Listbox2.configure(foreground="#000000")
        self.Listbox2.configure(highlightbackground="#d9d9d9")
        self.Listbox2.configure(highlightcolor="#000000")
        self.Listbox2.configure(selectbackground="#d9d9d9")
        self.Listbox2.configure(selectforeground="black")
        self.Listbox2.insert(tk.END, "0 decimale")
        self.Listbox2.insert(tk.END, "1 decimales")
        self.Listbox2.insert(tk.END, "2 decimales")
        self.Listbox2.insert(tk.END, "3 decimales")
        def on_selectVirgule(event2):
                selected_itemVirgule = self.Listbox2.get(self.Listbox2.curselection())
                if selected_itemVirgule == "0 decimale":
                        self.Label2.configure(text=str(round(float(self.labelMasse), 0)))
                elif selected_itemVirgule == "1 decimales":
                        self.Label2.configure(text=str(round(float(self.labelMasse), 1)))
                elif selected_itemVirgule == "2 decimales":
                        self.Label2.configure(text=str(round(float(self.labelMasse), 2)))
                elif selected_itemVirgule == "3 decimales":
                        self.Label2.configure(text=str(round(float(self.labelMasse), 3)))
        self.Listbox2.bind("<<ListboxSelect>>", on_selectVirgule)

        #première des deux listesbox ou la masse UNITÉ
        self.Listbox1 = tk.Listbox(self.Labelframe2)
        self.Listbox1.place(x=210, y=20, height=72, width=54
                , bordermode='ignore')
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(disabledforeground="#a3a3a3")
        self.Listbox1.configure(font="TkFixedFont")
        self.Listbox1.configure(foreground="#000000")
        self.Listbox1.configure(highlightbackground="#d9d9d9")
        self.Listbox1.configure(highlightcolor="#000000")
        self.Listbox1.configure(selectbackground="#d9d9d9")
        self.Listbox1.configure(selectforeground="black")
        self.Listbox1.insert(tk.END, "Gramme")
        self.Listbox1.insert(tk.END, "lbs")
        self.Listbox1.insert(tk.END, "Newton")
        self.Listbox1.insert(tk.END, "Once")
        def on_selectPoids(event):
                selected_item = self.Listbox1.get(self.Listbox1.curselection())
                if selected_item == "Gramme":
                        self.labelMasse = data["masse"]
                        self.Label2.configure(text=str(round(float(self.labelMasse), 3)))
                elif selected_item == "lbs":
                        self.labelMasse = data["masse"] * 2.20462
                        self.Label2.configure(text=str(round(float(self.labelMasse), 3)))
                elif selected_item == "Newton":
                        self.labelMasse = data["masse"] * 9.80665
                        self.Label2.configure(text=str(round(float(self.labelMasse), 3)))
                elif selected_item == "Once":
                        self.labelMasse = data["masse"] * 0.035274
                        self.Label2.configure(text=str(round(float(self.labelMasse), 3)))
        self.Listbox1.bind("<<ListboxSelect>>", on_selectPoids)

        #masse couleur set ou pas set
        self.Label2 = tk.Label(self.Labelframe2)
        self.Label2.place(x=10, y=24, height=71, width=178, bordermode='ignore')
        self.Label2.configure(activebackground="#d9d9d9")
        self.Label2.configure(activeforeground="black")
        if data["stable"] == True:
                self.Label2.configure(background="green")
        else:
                self.Label2.configure(background="red")
        self.Label2.configure(compound='left')
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Segoe UI} -size 12 -weight bold")
        self.Label2.configure(foreground="#000506")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="#000506")
        self.Label2.configure(text=str(data["masse"]))#modifié

        self.Labelframe1 = tk.LabelFrame(self.top)
        self.Labelframe1.place(x=10, y=53, height=393, width=240)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(font="-family {Segoe UI} -size 11 -weight bold")
        self.Labelframe1.configure(foreground="#000000")
        self.Labelframe1.configure(text='''Fonctions''')
        self.Labelframe1.configure(background="#d9d9d9")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="#000000")

        self.Button2 = tk.Button(self.Labelframe1)
        self.Button2.place(x=13, y=77, height=36, width=207, bordermode='ignore')

        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(activeforeground="black")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="#000000")
        self.Button2.configure(text='''Étalonner''')

        self.Button1 = tk.Button(self.Labelframe1)
        self.Button1.place(x=13, y=33, height=36, width=207, bordermode='ignore')

        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="black")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="#000000")
        self.Button1.configure(text='''Tarer''')

        self.Labelframe5 = tk.LabelFrame(self.Labelframe1)
        self.Labelframe5.place(x=10, y=285, height=95, width=220
                , bordermode='ignore')
        self.Labelframe5.configure(relief='groove')
        self.Labelframe5.configure(foreground="#000000")
        self.Labelframe5.configure(text='''Moyennage''')
        self.Labelframe5.configure(background="#d9d9d9")
        self.Labelframe5.configure(highlightbackground="#d9d9d9")
        self.Labelframe5.configure(highlightcolor="#000000")

        self.Message1 = tk.Message(self.Labelframe5)
        self.Message1.place(x=10, y=20, height=39, width=200
                , bordermode='ignore')
        self.Message1.configure(background="#d9d9d9")
        self.Message1.configure(foreground="#000000")
        self.Message1.configure(highlightbackground="#d9d9d9")
        self.Message1.configure(highlightcolor="#000000")
        self.Message1.configure(padx="1")
        self.Message1.configure(pady="1")
        self.Message1.configure(text='''Entrer un nombre entier de mesures désirées pour moyenner la masse.''')
        self.Message1.configure(width=200)

        self.Entry1 = tk.Entry(self.Labelframe5)
        self.Entry1.place(x=20, y=60, height=20, width=134, bordermode='ignore')
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="#000000")
        self.Entry1.configure(insertbackground="#000000")
        self.Entry1.configure(selectbackground="#d9d9d9")
        self.Entry1.configure(selectforeground="black")

        self.Labelframe4 = tk.LabelFrame(self.Labelframe1)
        self.Labelframe4.place(x=10, y=120, height=165, width=220
                , bordermode='ignore')
        self.Labelframe4.configure(relief='groove')
        self.Labelframe4.configure(foreground="#000000")
        self.Labelframe4.configure(text='''Comptage de pièces''')
        self.Labelframe4.configure(background="#d9d9d9")
        self.Labelframe4.configure(highlightbackground="#d9d9d9")
        self.Labelframe4.configure(highlightcolor="#000000")

        self.Checkbutton1 = tk.Checkbutton(self.Labelframe4)
        self.Checkbutton1.place(x=10, y=20, height=25, width=171
                , bordermode='ignore')
        self.Checkbutton1.configure(activebackground="#d9d9d9")
        self.Checkbutton1.configure(activeforeground="black")
        self.Checkbutton1.configure(anchor='w')
        self.Checkbutton1.configure(background="#d9d9d9")
        self.Checkbutton1.configure(compound='left')
        self.Checkbutton1.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1.configure(foreground="#000000")
        self.Checkbutton1.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1.configure(highlightcolor="#000000")
        self.Checkbutton1.configure(justify='left')
        self.Checkbutton1.configure(text='''Activer la fonctionnalité''')
        self.Checkbutton1.configure(variable=self.che86)

        #en dessous d'activité la fonctionnalité
        self.Listbox4 = tk.Listbox(self.Labelframe4)
        self.Listbox4.place(x=10, y=50, height=103, width=84
                , bordermode='ignore')
        self.Listbox4.configure(background="white")
        self.Listbox4.configure(disabledforeground="#a3a3a3")
        self.Listbox4.configure(font="TkFixedFont")
        self.Listbox4.configure(foreground="#000000")
        self.Listbox4.configure(highlightbackground="#d9d9d9")
        self.Listbox4.configure(highlightcolor="#000000")
        self.Listbox4.configure(selectbackground="#d9d9d9")
        self.Listbox4.configure(selectforeground="black")
        self.Listbox4.insert(tk.END, "1 cent")
        self.Listbox4.insert(tk.END, "5 cents")
        self.Listbox4.insert(tk.END, "10 cents")
        self.Listbox4.insert(tk.END, "25 cents")
        self.Listbox4.insert(tk.END, "1 dollars")
        self.Listbox4.insert(tk.END, "2 dollars")


        def on_selectnbrpiece(evenement):
                nombrepiece = ''
                selected_item = self.Listbox4.get(self.Listbox4.curselection())      
                if self.che86.get() == 1:
                        if selected_item == "1 cent": 
                                nombrepiece = data['masse']//2.35
                        elif selected_item == "5 cents": 
                                nombrepiece = data['masse']//3.95
                        elif selected_item == "10 cents": 
                                nombrepiece = data['masse']//1.75
                        elif selected_item == "25 cents": 
                                nombrepiece = data['masse']//4.4
                        elif selected_item == "1 dollars": 
                                nombrepiece = data['masse']//7 
                        elif selected_item == "2 dollars": 
                                nombrepiece = data['masse']//7.3    
                       
                
                self.Label2_1.configure(text= nombrepiece)    
                       
        self.Listbox4.bind("<<ListboxSelect>>", on_selectnbrpiece)
                

        self.Label2_1 = tk.Label(self.Labelframe4)
        self.Label2_1.place(x=100, y=50, height=101, width=98
                , bordermode='ignore')
        self.Label2_1.configure(activebackground="#d9d9d9")
        self.Label2_1.configure(activeforeground="black")
        self.Label2_1.configure(compound='left')
        self.Label2_1.configure(disabledforeground="#a3a3a3")
        self.Label2_1.configure(font="-family {Segoe UI} -size 12 -weight bold")
        self.Label2_1.configure(foreground="#000506")
        self.Label2_1.configure(highlightbackground="#d9d9d9")
        self.Label2_1.configure(highlightcolor="#000506")
        def on_checkbox_click():
                if self.che86.get():
                        self.Label2_1.configure(background="#f9040b")
                        self.Label2_1.configure(text= 0)
                else:
                        self.Label2_1.configure(background="gray")
                        self.Label2_1.configure(text= '')
                        
        self.Checkbutton1.configure(variable=self.che86, command= on_checkbox_click)


        self.Label1 = tk.Label(self.top)
        self.Label1.place(x=-4, y=0, height=51, width=804)
        self.Label1.configure(activebackground="#d9d9d9")
        self.Label1.configure(activeforeground="#f5f5f5")
        self.Label1.configure(background="#98cc91")
        self.Label1.configure(compound='left')
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 14 -weight bold")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="#000000")
        self.Label1.configure(text='''Balance app''')

#Modifié=====
    def acquisition(self):
        forces = []
        position = []
        temps = []
        i = 0
        dt = 20*10**-3
        while len(forces) != 1000:
                i += dt
                temps.append(i)
                forces.append(float(data['masse'])*9.806)
                position.append(position_tension(float(data["tension"])))
                self.x = temps
                self.yforce = forces
                self.yposition = position
                self.spectrum_viewer_fcn()
            
            
    def spectrum_viewer_fcn(self):
           
        self.ax.clear()
          
        if  self.graph_choice == 1:
            x, y = self.x, self.yforce
            
        elif self.graph_choice == 2:
            x, y = self.x, self.yposition
        else:
            x, y = [0,0]
        
        self.ax.plot(x, y, color='black', linewidth=1.5)
        plt.ticklabel_format(style='sci', axis='y', scilimits=(0,0))
        plt.ticklabel_format(style='sci', axis='x', scilimits=(0,0))
        # self.ax.spines['top'].set_visible(False)
        # self.ax.spines['right'].set_visible(False)

        plt.grid(True, which='both', linestyle='--', alpha=0.7, linewidth=0.5)
        
        if self.graph_choice == 1:
        #     self.ax.set_xlim(min(x), max(x))
        #     self.ax.set_ylim(min(y), max(y))
            self.ax.set_xlabel('temps [s]', fontsize=10)
            self.ax.set_ylabel('Force [N]', fontsize=10)
            
        elif self.graph_choice == 2:
        #     self.ax.set_xlim(min(x), max(x))
        #     self.ax.set_ylim(min(y), max(y))
            self.ax.set_xlabel('temps [s]', fontsize=10)
            self.ax.set_ylabel('position [mm]', fontsize=10)
            
        else:
        #     self.ax.set_xlim(min(x), max(x))
        #     self.ax.set_ylim(min(y), max(y))
            self.ax.set_xlabel('Indéterminé', fontsize=10)
            self.ax.set_ylabel('Indéterminé', fontsize=10)
        
        self.canvas.draw()
        self.top.update_idletasks()
#======

def start_up():
    InterfacePython_support.main()

if __name__ == '__main__':
    InterfacePython_support.main()




